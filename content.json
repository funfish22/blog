{"meta":{"title":"funfish","subtitle":null,"description":null,"author":"funfish","url":"https://funfish22.github.io","root":"/"},"pages":[{"title":"My Gallery","date":"2019-06-14T13:42:25.000Z","updated":"2019-06-16T15:26:15.043Z","comments":true,"path":"My-Gallery.html","permalink":"https://funfish22.github.io/My-Gallery.html","excerpt":"","text":""},{"title":"Hello World","date":"2019-06-16T15:26:15.044Z","updated":"2019-06-16T15:26:15.043Z","comments":true,"path":"hello-world.html","permalink":"https://funfish22.github.io/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}],"posts":[{"title":"React-setState基本應用","slug":"React-setState基本應用","date":"2019-08-05T15:46:07.000Z","updated":"2019-08-05T15:50:12.080Z","comments":true,"path":"2019/08/05/React-setState基本應用/","link":"","permalink":"https://funfish22.github.io/2019/08/05/React-setState基本應用/","excerpt":"","text":"基本應用2.setState使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import React, &#123;Component&#125; from 'react';import PropTypes from 'prop-types'class Counter extends Component&#123; constructor(props)&#123; super(props); this.state= &#123; num: props.initNum, &#125; &#125; addNum = () =&gt; &#123; // 來試試看num一次加2 //setState為非同步方式，所以不能期望下一個setState的num馬上+1，所以能使用下面兩招方法 this.setState(&#123; num: this.state.num + 1, &#125;) this.setState(&#123; num: this.state.num + 1, &#125;) //第一招 使用function 箭頭涵式 this.setState((state) =&gt; &#123; //使用return更改值 return &#123; num: state.num + 1, &#125; &#125;) this.setState((state) =&gt; (&#123; //使用物件更改值，注意，記得&#123;&#125;物件外面要在包一層()，不然程式會認為是要開始寫一個涵式 num: state.num + 1, &#125;)); //第二招 使用callback function this.setState((state) =&gt; (&#123; //執行的順序會是先跑完外面一圈的箭頭涵式，當兩個都跑完之後，再去執行callback function num: state.num + 1, &#125;), () =&gt; &#123; setTimeout(() =&gt; &#123; //先執行完兩個callback function，再去執行setTimeout console.log('執行1') &#125;, 0); &#125;); this.setState((state) =&gt; (&#123; num: state.num + 2, &#125;), () =&gt; &#123; console.log('執行2') &#125;); &#125; render() &#123; return( &lt;div&gt; &lt;h1&gt;&#123;this.state.num&#125;&lt;/h1&gt; &lt;button type=\"button\" onClick=&#123;this.addNum&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;Counter.defaultProps = &#123; initNum: 5,&#125;Counter.propTypes = &#123; initNum: PropTypes.number,&#125;export default Counter;","categories":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/tags/React/"}]},{"title":"React-props基本應用","slug":"React-props基本應用","date":"2019-08-05T14:06:14.000Z","updated":"2019-08-05T14:39:02.554Z","comments":true,"path":"2019/08/05/React-props基本應用/","link":"","permalink":"https://funfish22.github.io/2019/08/05/React-props基本應用/","excerpt":"","text":"基本應用1.用props指定初始值 Counter.js 1234567891011121314151617181920212223242526272829import React, &#123;Component&#125; from 'react';class Counter extends Component&#123; constructor(props)&#123; //父層傳到子層的方法 super(props); this.state= &#123; num: props.initNum, //父層傳到子層的屬性 &#125; &#125; addNum = () =&gt; &#123; this.setState(&#123; num: this.state.num + 1, &#125;) &#125; render() &#123; return( &lt;div&gt; &lt;h1&gt;&#123;this.state.num&#125;&lt;/h1&gt; &lt;button type=\"button\" onClick=&#123;this.addNum&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default Counter; index.js 12345import React from 'react';import ReactDom from 'react-dom';import Counter from './Counter'ReactDom.render(&lt;Counter initNum=&#123;10&#125;/&gt;, document.getElementById('root')) initNum要傳到子層的屬性跟值，當沒有給予這個屬性和值的時候，用defaultProps指定預設值 有給予初始值，網頁呈現畫面 2.用defaultProps指定預設值(兩種方法)第一種寫法(寫在class裡面) Counter.js123456789101112131415161718192021222324252627282930313233import React, &#123;Component&#125; from 'react';class Counter extends Component&#123; static defaultProps = &#123; //指定initNum預設值為多少 initNum: 5, &#125; constructor(props)&#123; //父層傳到子層的方法 super(props); this.state= &#123; num: props.initNum, //父層傳到子層的屬性 &#125; &#125; addNum = () =&gt; &#123; this.setState(&#123; num: this.state.num + 1, &#125;) &#125; render() &#123; return( &lt;div&gt; &lt;h1&gt;&#123;this.state.num&#125;&lt;/h1&gt; &lt;button type=\"button\" onClick=&#123;this.addNum&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default Counter; 第二種寫法(寫在class外面) Counter.js 123456789101112131415161718192021222324252627282930313233import React, &#123;Component&#125; from 'react';class Counter extends Component&#123; constructor(props)&#123; //父層傳到子層的方法 super(props); this.state= &#123; num: props.initNum, //父層傳到子層的屬性 &#125; &#125; addNum = () =&gt; &#123; this.setState(&#123; num: this.state.num + 1, &#125;) &#125; render() &#123; return( &lt;div&gt; &lt;h1&gt;&#123;this.state.num&#125;&lt;/h1&gt; &lt;button type=\"button\" onClick=&#123;this.addNum&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;Counter.defaultProps = &#123; //指定initNum預設值為多少 initNum: 5,&#125;export default Counter; index.js 12345import React from 'react';import ReactDom from 'react-dom';import Counter from './Counter'ReactDom.render(&lt;Counter/&gt;, document.getElementById('root')) 當沒有給予屬性和值的時候，用defaultProps指定預設值 沒有有給予初始值，將以預設值(5)呈現，網頁呈現畫面 3.用propTypes檢查型別(兩種方法)第一種寫法(寫在class裡面) Counter.js12345678910111213141516171819202122232425262728293031323334353637import React, &#123;Component&#125; from 'react';import PropTypes from 'prop-types'; //檢查型別需要載入此模組class Counter extends Component&#123; //指定initNum預設值為多少 static defaultProps = &#123; initNum: 10, &#125; static propTypes = &#123; //判斷型別是否為數字 initNum: PropTypes.number, &#125; constructor(props)&#123; //父層傳到子層的方法 super(props); this.state= &#123; num: props.initNum, //父層傳到子層的屬性 &#125; &#125; addNum = () =&gt; &#123; this.setState(&#123; num: this.state.num + 1, &#125;) &#125; render() &#123; return( &lt;div&gt; &lt;h1&gt;&#123;this.state.num&#125;&lt;/h1&gt; &lt;button type=\"button\" onClick=&#123;this.addNum&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default Counter; 第二種寫法(寫在class外面) Counter.js 1234567891011121314151617181920212223242526272829303132333435363738import React, &#123;Component&#125; from 'react';import PropTypes from 'prop-types'; //檢查型別需要載入此模組class Counter extends Component&#123; constructor(props)&#123; //父層傳到子層的方法 super(props); this.state= &#123; num: props.initNum, //父層傳到子層的屬性 &#125; &#125; addNum = () =&gt; &#123; this.setState(&#123; num: this.state.num + 1, &#125;) &#125; render() &#123; return( &lt;div&gt; &lt;h1&gt;&#123;this.state.num&#125;&lt;/h1&gt; &lt;button type=\"button\" onClick=&#123;this.addNum&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;Counter.defaultProps = &#123; //指定initNum預設值為多少 initNum: 10,&#125;Counter.propTypes = &#123; //判斷型別是否為數字 initNum: PropTypes.number, &#125;export default Counter; index.js 12345import React from 'react';import ReactDom from 'react-dom';import Counter from './Counter'ReactDom.render(&lt;Counter initNum='10'/&gt;, document.getElementById('root')) 檢查initNum型別，此時為字串，console會跳出錯誤提醒 initNum型別錯誤，網頁呈現畫面","categories":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/tags/React/"}]},{"title":"React-props父層屬性傳到子層","slug":"React-props父層屬性傳到子層","date":"2019-07-30T14:52:15.000Z","updated":"2019-07-30T15:05:41.925Z","comments":true,"path":"2019/07/30/React-props父層屬性傳到子層/","link":"","permalink":"https://funfish22.github.io/2019/07/30/React-props父層屬性傳到子層/","excerpt":"","text":"1.利用props父層屬性傳到子層 父層List.js 123456789101112131415161718192021import React, &#123; Component &#125; from 'react'; //載入react核心import Item from './Item' //載入Item.jsclass List extends Component&#123; //創建一個List組件 render() &#123; return( &lt;ul&gt; //text和num是要傳到子層的屬性， //屬性內的文字如果是用&#123;&#125;包起來則是代表數字 //&lt;Item&gt;文字&lt;/Item&gt; 文字也可以傳到子層 //使用Item組件 &lt;Item text=\"學習vue\" num=\"100\"&gt;筆記vue&lt;/Item&gt; &lt;Item text=\"學習react\" num=&#123;100&#125;&gt;筆記react&lt;/Item&gt; &lt;Item text=\"學習angular\"&gt;筆記angular&lt;/Item&gt; &lt;/ul&gt; ) &#125;&#125;export default List; 子層Item.js 12345678910111213141516import React, &#123;Component&#125; from 'react'; //載入react核心class Item extends Component&#123; //創建一個Item組件 render() &#123; return( &lt;li&gt; //接收父層傳來的屬性(text, num) &#123;this.props.text&#125; &#123;this.props.num + 1&#125; //也可以接收父層傳來的文字 &lt;p&gt;&#123;this.props.children&#125;&lt;/p&gt; &lt;/li&gt; ) &#125;&#125;export default Item; 網頁呈現畫面 (1)text和num是傳到子層的屬性， 屬性內的文字如果是用{}包起來則是代表數字， (2)文字 文字也可以傳到子層 段落P的內容this.props.children","categories":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/tags/React/"}]},{"title":"React-組件的自訂涵式兩種寫法","slug":"React-組件的自訂涵式兩種寫法","date":"2019-07-29T14:06:13.000Z","updated":"2019-07-29T14:26:20.138Z","comments":true,"path":"2019/07/29/React-組件的自訂涵式兩種寫法/","link":"","permalink":"https://funfish22.github.io/2019/07/29/React-組件的自訂涵式兩種寫法/","excerpt":"","text":"組件的自訂涵式兩種寫法第一種(箭頭涵式)詳細資料請看上一篇文章(React-組件的事件處理和狀態更新) 第二種(一般涵式)使用一般涵式，則需要將this重新綁定，所以建議使用箭頭涵式。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import React, &#123;Component&#125; from 'react'; //載入react核心class Message extends Component&#123; //創建一個Message組件 //組件狀態 state = &#123; 'title': 'Hello', 'name': 'John' &#125;; //constructor（建構子）是個隨著 class 一同建立並初始化物件的特殊方法 //預設的建構子長得像這樣 //constructor(props)&#123; // super(props) //&#125; constructor(props)&#123; super(props) //super() 必須在使用 this 以前被呼叫。不這樣的話會發生錯誤。 //將this.changeName永遠綁定(bind)在自己身上(this) this.changeName = this.changeName.bind(this) &#125; //自訂涵式(使用一般涵式) //如果沒有使用constructor()，則this綁定在buttn身上 changeName() &#123; this.setState(&#123; 'name': 'Bob', &#125;) &#125; //生命週期內的涵式 render() &#123; return( &lt;div&gt; //this指向此組件 &lt;h1&gt; &#123; this.state.title &#125; &lt;/h1&gt; &lt;h3&gt;I am &#123; this.state.name &#125;&lt;/h3&gt; &lt;button onClick= &#123;this.changeName&#125;&gt;更改state&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default Message;","categories":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/tags/React/"}]},{"title":"React-組件的事件處理和狀態更新","slug":"React-組件的事件處理和狀態更新","date":"2019-07-28T07:50:57.000Z","updated":"2019-07-29T14:06:39.123Z","comments":true,"path":"2019/07/28/React-組件的事件處理和狀態更新/","link":"","permalink":"https://funfish22.github.io/2019/07/28/React-組件的事件處理和狀態更新/","excerpt":"","text":"組件的事件處理和狀態更新 新增一個Message組件 123456789101112131415161718192021222324252627282930import React, &#123;Component&#125; from 'react'; //載入react核心class Message extends Component&#123; //創建一個Message組件 //組件狀態 state = &#123; 'title': 'Hello', 'name': 'John' &#125;; //自訂涵式 changeName = () =&gt;&#123; //使用箭頭涵式確保this指向此組件 this.setState(&#123; //使用setState變更state的內容 'name': 'Bob', &#125;) &#125; //生命週期內的涵式 render() &#123; return( &lt;div&gt; //this指向此組件 &lt;h1&gt; &#123; this.state.title &#125; &lt;/h1&gt; &lt;h3&gt;I am &#123; this.state.name &#125;&lt;/h3&gt; //JSX，所以onClick要用駝峰式 &lt;button onClick= &#123;this.changeName&#125;&gt;更改state&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default Message; 新增一個index.js(此為預設的進入點，找到所import進來的模組，再下去找其他檔案import的模組) 123456import React from 'react'; //載入react核心import ReactDom from 'react-dom'; //載入react-dom核心import Message from './Message'; //載入Message.jsReactDom.render(&lt;Message/&gt;, document.getElementById('root'))//render第一個參數是element，第二個參數是DOM container 網頁呈現畫面點擊BUTTON按鈕之後，變更state的內容","categories":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/tags/React/"}]},{"title":"React-入門教學第一篇","slug":"React-入門教學第一篇","date":"2019-07-27T14:09:04.000Z","updated":"2019-07-28T08:00:48.742Z","comments":true,"path":"2019/07/27/React-入門教學第一篇/","link":"","permalink":"https://funfish22.github.io/2019/07/27/React-入門教學第一篇/","excerpt":"","text":"1.使用node.js 新增一個全新的React專案123npx create-react-app 專案名稱 // 利用npx create-react-app 建構專案 cd my-app // 移動至專案目錄下npm start // 啟動 2.建立一個超入門的組件 先將SRC資料夾底下的檔案全部刪除 新增Item.js 1234567891011import React, &#123;Component&#125; from 'react'; //載入react核心class Item extends Component&#123; //創建一個Item組件 render() &#123; return( &lt;li&gt;Hello, World!&lt;/li&gt; ) &#125;&#125;export default Item; 新增一個List.js 1234567891011121314151617import React, &#123; Component &#125; from 'react'; //載入react核心import Item from './Item' //載入Item.jsclass List extends Component&#123; //創建一個List組件 render() &#123; return( &lt;ul&gt; &lt;Item/&gt; //使用Item組件 &lt;Item/&gt; &lt;Item/&gt; &lt;Item/&gt; &lt;/ul&gt; ) &#125;&#125;export default List; 新增一個index.js(此為預設的進入點，找到所import進來的模組，再下去找其他檔案import的模組) 12345678import React from 'react'; //載入react核心import ReactDom from 'react-dom'; //載入react-dom核心import List from './List'; //載入List.jsReactDom.render(&lt;List/&gt;, document.getElementById('root'))//render第一個參數是element，第二個參數是DOM container//List --&gt; 它是一個class//&lt;List/&gt; --&gt; 它是一個元素(object) 使用 npm run build 打包檔案 網頁呈現畫面","categories":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://funfish22.github.io/tags/React/"}]},{"title":"SEO教學","slug":"SEO教學","date":"2019-06-16T15:04:58.000Z","updated":"2019-07-27T14:26:12.833Z","comments":true,"path":"2019/06/16/SEO教學/","link":"","permalink":"https://funfish22.github.io/2019/06/16/SEO教學/","excerpt":"","text":"http://schema.org/https://search.google.com/structured-data/testing-tool/ 初始設定 先查看網站是什麼類型(例如: 產品,美術,電影…) 到此網站https://schema.org/docs/schemas.html找符合的類型 WebSite(網站名稱)WebSite寫法 head 加上 itemscope=”itemscope” itemtype=”http://schema.org/WebSite&quot; title 加上 itemprop=”name” 1234&lt;head itemscope=\"itemscope\" itemtype=\"http://schema.org/WebSite\"&gt; &lt;meta name=\"copyright\" content=\"CopyRight © All Rights Reserved.\"/&gt; &lt;title itemprop=\"name\"&gt;全球資訊網‧&lt;/title&gt;&lt;/head&gt; SiteNavigationElement(最主要導覽列)SiteNavigationElement寫法 HTML5寫法 ul 加上 itemscope=”itemscope” itemtype=”http://schema.org/SiteNavigationElement&quot; li 加上 itemprop=”name” 1234567&lt;nav class=\"nav\"&gt; &lt;ul class=\"nav__list\" itemscope=\"itemscope\" itemtype=\"http://schema.org/SiteNavigationElement\"&gt; &lt;li itemprop=\"name\"&gt;&lt;a class=\"nav__link\" href=\"../XXX.html\" itemprop=\"url\"&gt;連結A&lt;/a&gt;&lt;/li&gt; &lt;li itemprop=\"name\"&gt;&lt;a class=\"nav__link\" href=\"../XXX.html\" itemprop=\"url\"&gt;連結B&lt;/a&gt;&lt;/li&gt; &lt;li itemprop=\"name\"&gt;&lt;a class=\"nav__link\" href=\"../XXX.html\" itemprop=\"url\"&gt;連結C&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; JSON寫法 123456789101112131415161718192021222324252627282930&lt;!-- 網站導航架構標記 SiteNavigationElement--&gt;&lt;script type=\"application/ld+json\"&gt;&#123; \"@context\": \"https://schema.org\", \"@type\":\"ItemList\", \"itemListElement\": [ &#123; \"@context\": \"https://schema.org\", \"@type\":\"SiteNavigationElement\", \"position\":1, \"name\": \"選單1\", \"url\": \"http://選單連結\" &#125;, &#123; \"@context\": \"https://schema.org\", \"@type\":\"SiteNavigationElement\", \"position\":2, \"name\": \"選單2\", \"url\": \"http://選單連結\" &#125;, &#123; \"@context\": \"https://schema.org\", \"@type\":\"SiteNavigationElement\", \"position\":3, \"name\": \"選單3\", \"url\": \"http://選單連結\" ]&#125;&lt;/script&gt; BreadcrumbList(麵包屑)BreadcrumbList寫法 直接使用javascript json格式 123456789101112131415&lt;!-- BreadcrumbList --&gt;&lt;script type=\"application/ld+json\"&gt; &#123; \"@context\": \"http://schema.org\", \"@type\": \"BreadcrumbList\", \"itemListElement\": [&#123; \"@type\": \"ListItem\", \"position\": 1, \"item\": &#123; \"@id\": \"http://網站地址\", \"name\": \"全球資訊網\" &#125; &#125;] &#125;&lt;/script&gt; 網站類型(例如: Product, ArtGallery, Store…)網站類型寫法 直接使用javascript json格式 “@type”: “網站類型” 參照網站類型屬性填寫 12345678910111213141516171819202122232425262728293031323334353637&lt;!-- ProfessionalService --&gt;&lt;script type=\"application/ld+json\"&gt; &#123; \"@context\": \"http://schema.org\", \"@type\": \"Store\", \"url\": \"http://網站地址\", \"sameAs\":[ \"https://www.facebook.com/XXX\", \"https://www.facebook.com/XXX\", \"https://www.facebook.com/XXX\", \"https://www.facebook.com/XXX\", \"https://www.facebook.com/XXX\", \"https://www.facebook.com/XXX\", \"https://www.youtube.com/XXX\" ], \"name\": \"網站名稱\", \"description\": \"主題說明\", \"logo\": \"http://連結/img/logo_menu.png\", \"image\": \"http://連結/upload/F2E/home/windows_01_715_445.jpg\", \"email\": \"email@gmail.com\", \"address\": &#123; \"@type\": \"PostalAddress\", \"addressCountry\": \"台灣 Taiwan\", \"addressLocality\": \"XX市 XX City\", \"addressRegion\": \"XX區\", \"postalCode\": \"郵遞區號\", \"streetAddress\": \"XX路X段XX號 No. XXX, Sec. X, XX Rd\" &#125;, \"telephone\": \"+886 X XXXX-XXXX\", \"hasMap\": \"https://www.google.com/maps/place/googleMap\", \"priceRange\": \"$0 - $2,000,000,000\", \"geo\": &#123; \"@type\": \"GeoCoordinates\", \"latitude\": \"XX.XXXXXX\", \"longitude\": \"XXX0.XXXXXX\" &#125; &#125;","categories":[{"name":"SEO","slug":"SEO","permalink":"https://funfish22.github.io/categories/SEO/"}],"tags":[{"name":"SEO","slug":"SEO","permalink":"https://funfish22.github.io/tags/SEO/"}]},{"title":"CSS3教學","slug":"CSS3教學","date":"2019-06-14T13:46:03.000Z","updated":"2019-06-16T15:22:56.875Z","comments":true,"path":"2019/06/14/CSS3教學/","link":"","permalink":"https://funfish22.github.io/2019/06/14/CSS3教學/","excerpt":"","text":"1. 超過行數顯示… CSS3寫法 12345678910overflow: hiddentext-overflow: ellipsisdisplay: -webkit-box//超過2行顯示...-webkit-line-clamp: 2-webkit-box-orient: verticalword-break: break-all-webkit-box-orient: vertical jQuery寫法 123456789function wordlatest(len, target) &#123; $(target).each(function() &#123; if ($(this).text().length &gt; len) &#123; var text = $(this).text().substring(0, len - 1) + \"...\"; $(this).text(text); &#125; &#125;);&#125; 2. px轉換成rem語法(SASS) CSS3寫法 12345678$browser-default-font-size: 16px !defaulthtml font-size: $browser-default-font-size@function rem($px) //rem可以改成你想使用的名稱 @return $px / $browser-default-font-size * 1rem 使用方法 1font-size: rem(24px) 3. Ajax呼叫12&lt;div class=&quot;test&quot; data-show=&quot;forgetPw.html&quot;&gt;test&lt;/div&gt;&lt;div class=&quot;showContent&quot;&gt;&lt;/div&gt; 呼叫data-show 1234567$('.test').click(function() &#123; var path = $(this).data('show') $.ajax(&#123; url: path, &#125;).done(function(data) &#123; $('.showContent').append(data); &#125;); 4. after後 繼承父元素顏色說明 5. 錨點12345678910111213141516171819202122232425262728293031var ItemsAction = function(item, action) &#123; $(window).scroll(function() &#123; var scrollPos = $(window).scrollTop(); var windowHeight = $(window).height(); $(item).each(function() &#123; var thisPos = $(this).offset().top; if ((windowHeight + scrollPos) &gt;= thisPos + 200) &#123; $(this).addClass(action); &#125; &#125;); &#125;); &#125; function scroll_down()&#123; var frame = $('.for_scroll'), frame_banner = $('.for_scroll').find('.lbox_banner'); if ( $('.for_scroll .scroll_down').length &gt; 0 ) &#123; $('.for_scroll .scroll_down span').on('click',function(event)&#123; event.preventDefault(); var a = frame_banner.outerHeight(); frame.animate(&#123; scrollTop: a &#125;, 700); &#125;); &#125; &#125; $(\"a[href*=#]:not([href=#])\").click(function() &#123; var target = $($(this).attr('href')).offset().top; $('html, body').animate(&#123; scrollTop: target &#125;, 500) return false; &#125;); 6. safari 卷軸不順暢問題https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling添加CSS 1-webkit-overflow-scrolling: touch 7. 更改input placeholder顏色12345678910111213141516171819202122232425/* 背景透明 */background-color: transparent/* placeholder color *//* chrome */input::-webkit-input-placeholder /* firefox 18- */input:-moz-placeholder /* firefox 19+ */input::-moz-placeholder /* IE */input:-ms-input-placeholder/* focus color *//* chrome */input:focus::-webkit-input-placeholder/* firefox 18- */input:focus:-moz-placeholder /* firefox 19+ */input:focus::-moz-placeholder /* IE */input:focus:-ms-input-placeholder 8. 只有IE才會吃的css參考 https://ithelp.ithome.com.tw/articles/10196809 1@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) 9. 選擇空元素第2行的p段落沒填寫資料，所以會被隱藏 123&lt;p&gt;123&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt; 123p:empty&#123;display: none;&#125;","categories":[{"name":"CSS3","slug":"CSS3","permalink":"https://funfish22.github.io/categories/CSS3/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://funfish22.github.io/tags/CSS3/"}]}]}